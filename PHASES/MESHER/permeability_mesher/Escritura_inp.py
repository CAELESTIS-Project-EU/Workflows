# -*- coding: utf-8 -*-

import numpy as np
import time

def Escritura_inp(nombre_caso ,dimX, dimY, dimZ, matriz_4d, dimXc, dimYc, dimZc, datos_input, matriz_3dc_inout, matriz_3dc_oris, 
                  Porosityfield_dir1_array, Porosityfield_dir2_array, Porosityfield_dir3_array):
	#################################################################
	#################################################################
	inicio = time.time()
	# Abre un archivo de texto en modo escritura
	nombre_caso_inp = nombre_caso+'.inp'
	with open(nombre_caso_inp, "w") as archivo:
		# Escribe una descripción
		archivo.write("*Heading\n")
		archivo.write("File generated by TexGen v3.12.2\n")
		archivo.write("************\n")
		archivo.write("*** MESH ***\n")
		archivo.write("************\n")
		archivo.write("*Node\n")
	
		# Escritura nodos
		n_nodo = 1
		posicion_n_nodo = np.zeros((dimX, dimY, dimZ))
		for i in range(dimX):
			for j in range(dimY):
				for k in range(dimZ):
					coor_x = matriz_4d[i, j, k, 0]
					coor_y = matriz_4d[i, j, k, 1]
					coor_z = matriz_4d[i, j, k, 2]
					archivo.write(f"{n_nodo}, {coor_x}, {coor_y}, {coor_z}\n")
					posicion_n_nodo[i,j,k]=n_nodo
					n_nodo = n_nodo + 1
		
		# Escritura elementos
		archivo.write("*Element, Type=C3D8R\n")
		n_elem = 1
		posicion_n_elemento = np.zeros((dimXc, dimYc, dimZc))
		for i in range(dimXc):
			for j in range(dimYc):
				for k in range(dimZc):
					e1 = int(posicion_n_nodo[i, j, k])
					e2 = int(posicion_n_nodo[i+1, j, k])
					e3 = int(posicion_n_nodo[i+1, j+1, k])
					e4 = int(posicion_n_nodo[i, j+1, k])
					e5 = int(posicion_n_nodo[i, j, k+1])
					e6 = int(posicion_n_nodo[i+1, j, k+1])
					e7 = int(posicion_n_nodo[i+1, j+1, k+1])
					e8 = int(posicion_n_nodo[i, j+1, k+1])
					archivo.write(f"{n_elem}, {e1}, {e2}, {e3}, {e4}, {e5}, {e6}, {e7}, {e8}\n")
					posicion_n_elemento[i,j,k] = n_elem
					n_elem = n_elem + 1
		
		#############################
		archivo.write("********************\n")
		archivo.write("*** ORIENTATIONS ***\n")
		archivo.write("********************\n")
		archivo.write("** Orientation vectors\n")
		archivo.write("** 1st vector represents the fibre direction\n")
		archivo.write("** 2nd vector is an arbitrary vector perpendicular to the first\n")
		archivo.write("*Distribution Table, Name=TexGenOrientationVectors\n")
		archivo.write("COORD3D,COORD3D\n")
		archivo.write(f"*Distribution, Location=Element, Table=TexGenOrientationVectors, Name=TexGenOrientationVectors, Input={nombre_caso}.ori\n")
		archivo.write("*Orientation, Name=TexGenOrientations, Definition=coordinates\n")
		archivo.write("TexGenOrientationVectors\n")
		archivo.write("1, 0\n")
		#############################
		
		
		# Escritura sets
		archivo.write("********************\n")
		archivo.write("*** ELEMENT SETS ***\n")
		archivo.write("********************\n")
		archivo.write("** TexGen generates a number of element sets:\n")
		archivo.write("** All - Contains all elements\n")
		archivo.write("** Matrix - Contains all elements belonging to the matrix\n")
		archivo.write("** YarnX - Where X represents the yarn index\n")
		archivo.write("*ElSet, ElSet=AllElements, Generate\n")
		archivo.write(f"1, {dimXc*dimYc*dimZc}, 1\n")
        
        # Encuentra las coordenadas de las posiciones con valor 0 usando np.argwhere para el set de Matriz
		archivo.write("*ElSet, ElSet=Matrix\n")
		posiciones_yarnX = np.argwhere(matriz_3dc_inout == 0)
		contar16 = 1
		for k1 in range(posiciones_yarnX.shape[0]):
			i = posiciones_yarnX[k1, 0]
			j = posiciones_yarnX[k1, 1]
			k = posiciones_yarnX[k1, 2]
			es = int(posicion_n_elemento[i, j, k])
			if k1 == posiciones_yarnX.shape[0]-1:
				contar16 = 16
			if contar16 < 16:
				archivo.write(f"{es}, ")
			else:
				archivo.write(f"{es}\n")
				contar16 = 0
			contar16 = contar16 + 1
        
        
		for nsets in range(len(datos_input)):
			archivo.write(f"*ElSet, ElSet=Yarn{nsets+1}\n")
			# Encuentra las coordenadas de las posiciones con valor 1, 2, 3... usando np.argwhere
			posiciones_yarnX = np.argwhere(matriz_3dc_inout == nsets+1)
			contar16 = 1
			for k1 in range(posiciones_yarnX.shape[0]):
				i = posiciones_yarnX[k1, 0]
				j = posiciones_yarnX[k1, 1]
				k = posiciones_yarnX[k1, 2]
				es = int(posicion_n_elemento[i, j, k])
				if k1 == posiciones_yarnX.shape[0]-1:
					contar16 = 16
				if contar16 < 16:
					archivo.write(f"{es}, ")
				else:
					archivo.write(f"{es}\n")
					contar16 = 0
				contar16 = contar16 + 1
			
		
		archivo.write("*****************\n")
		archivo.write("*** NODE SETS ***\n")
		archivo.write("*****************\n")
		archivo.write("** AllNodes - Node set containing all elements\n")
		archivo.write("*NSet, NSet=AllNodes, Generate\n")
		archivo.write(f"1, {dimX*dimY*dimZ}, 1\n")
        

		# Escritura sets BCs
		escribir_BCs = 1
		if escribir_BCs == 1:
			archivo.write("*Nset, nset=Xneg\n")
			contar16 = 1
			for nnodo in range(len(posicion_n_nodo[0,:,0])):
				for nnodo2 in range(len(posicion_n_nodo[0,0,:])):
					if nnodo==len(posicion_n_nodo[0,:,0])-1 and nnodo2==len(posicion_n_nodo[0,0,:])-1:
						contar16=16
					if contar16 < 16:
						archivo.write(f"{int(posicion_n_nodo[0,nnodo,nnodo2])}, ")
					else:
						archivo.write(f"{int(posicion_n_nodo[0,nnodo,nnodo2])}\n")
						contar16 = 0
					contar16 = contar16 + 1
	    
			archivo.write("*Nset, nset=Xpos\n")
			contar16 = 1
			for nnodo in range(len(posicion_n_nodo[-1,:,-1])):
				for nnodo2 in range(len(posicion_n_nodo[-1,-1,:])):
					if nnodo==len(posicion_n_nodo[-1,:,-1])-1 and nnodo2==len(posicion_n_nodo[-1,-1,:])-1:
						contar16=16
					if contar16 < 16:
						archivo.write(f"{int(posicion_n_nodo[-1,nnodo,nnodo2])}, ")
					else:
						archivo.write(f"{int(posicion_n_nodo[-1,nnodo,nnodo2])}\n")
						contar16 = 0
					contar16 = contar16 + 1
	    
			archivo.write("*Nset, nset=Yneg\n")
			contar16 = 1
			for nnodo in range(len(posicion_n_nodo[:,0,0])):
				for nnodo2 in range(len(posicion_n_nodo[0,0,:])):
					if nnodo==len(posicion_n_nodo[:,0,0])-1 and nnodo2==len(posicion_n_nodo[0,0,:])-1:
						contar16=16
					if contar16 < 16:
						archivo.write(f"{int(posicion_n_nodo[nnodo,0,nnodo2])}, ")
					else:
						archivo.write(f"{int(posicion_n_nodo[nnodo,0,nnodo2])}\n")
						contar16 = 0
					contar16 = contar16 + 1
	    
			archivo.write("*Nset, nset=Ypos\n")
			contar16 = 1
			for nnodo in range(len(posicion_n_nodo[:,-1,-1])):
				for nnodo2 in range(len(posicion_n_nodo[-1,-1,:])):
					if nnodo==len(posicion_n_nodo[:,-1,-1])-1 and nnodo2==len(posicion_n_nodo[-1,-1,:])-1:
						contar16=16
					if contar16 < 16:
						archivo.write(f"{int(posicion_n_nodo[nnodo,-1,nnodo2])}, ")
					else:
						archivo.write(f"{int(posicion_n_nodo[nnodo,-1,nnodo2])}\n")
						contar16 = 0
					contar16 = contar16 + 1
	    
			archivo.write("*Nset, nset=Zneg\n")
			contar16 = 1
			for nnodo in range(len(posicion_n_nodo[:,0,0])):
				for nnodo2 in range(len(posicion_n_nodo[0,:,0])):
					if nnodo==len(posicion_n_nodo[:,0,0])-1 and nnodo2==len(posicion_n_nodo[0,:,0])-1:
						contar16=16
					if contar16 < 16:
						archivo.write(f"{int(posicion_n_nodo[nnodo,nnodo2,0])}, ")
					else:
						archivo.write(f"{int(posicion_n_nodo[nnodo,nnodo2,0])}\n")
						contar16 = 0
					contar16 = contar16 + 1
	    
			archivo.write("*Nset, nset=Zpos\n")
			contar16 = 1
			for nnodo in range(len(posicion_n_nodo[:,-1,-1])):
				for nnodo2 in range(len(posicion_n_nodo[-1,:,-1])):
					if nnodo==len(posicion_n_nodo[:,-1,-1])-1 and nnodo2==len(posicion_n_nodo[-1,:,-1])-1:
						contar16=16
					if contar16 < 16:
						archivo.write(f"{int(posicion_n_nodo[nnodo,nnodo2,-1])}, ")
					else:
						archivo.write(f"{int(posicion_n_nodo[nnodo,nnodo2,-1])}\n")
						contar16 = 0
					contar16 = contar16 + 1
    
		
		# Escritura material
		archivo.write("*****************\n")
		archivo.write("*** MATERIALS ***\n")
		archivo.write("*****************\n")
		archivo.write("*Material, Name=Mat0\n")
		archivo.write("*Elastic\n")
		archivo.write("3e+09, 0.2\n")
		archivo.write("*Solid Section, ElSet=Matrix, Material=Mat0\n")
		for nsets in range(len(datos_input)):
			archivo.write(f"*Solid Section, ElSet=Yarn{nsets+1}, Material=Mat0, Orientation=TexGenOrientations\n")
				
	
	print("Archivo inp ha sido creado.")
	
	#################################################################
	#################################################################
	
	# Abre un archivo de texto en modo escritura
	nombre_caso_ori = nombre_caso+'.ori'
	with open(nombre_caso_ori, "w") as archivo:
		# Escribe una descripción
		archivo.write("********************\n")
		archivo.write("*** ORIENTATIONS ***\n")
		archivo.write("********************\n")
		archivo.write("** Orientation vectors\n")
		archivo.write("** 1st vector represents the fibre direction\n")
		archivo.write("** 2nd vector is an arbitrari vector perpendicular to the first\n")
		archivo.write(", 1.0, 0.0, 0.0,  0.0, 1.0, 0.0\n")
		
		# Escritura orientaciones para los elementos del Yarn1
		# Encuentra las coordenadas de las posiciones con valor distinto de 0 usando np.argwhere
		posiciones_yarnX = np.argwhere(matriz_3dc_inout != 0)
		for k1 in range(posiciones_yarnX.shape[0]):
			i = posiciones_yarnX[k1, 0]
			j = posiciones_yarnX[k1, 1]
			k = posiciones_yarnX[k1, 2]
			es = int(posicion_n_elemento[i, j, k])
			u = Porosityfield_dir1_array[es-1, 0]
			v = Porosityfield_dir1_array[es-1, 1]
			w = Porosityfield_dir1_array[es-1, 2]

			u2 = Porosityfield_dir2_array[es-1, 0]
			v2 = Porosityfield_dir2_array[es-1, 1]
			w2 = Porosityfield_dir2_array[es-1, 2]
			
			archivo.write(f"{es}, {u}, {v}, {w},  {u2}, {v2}, {w2}\n")
			
	print("Archivo ori ha sido creado.")
	fin = time.time()
	tiempo_ej = fin-inicio
	print(f"Tiempo de ejecución escribir archivos: {tiempo_ej} segundos")
	

